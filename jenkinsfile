def registry = 'https://kenndrick.jfrog.io'
pipeline {
    agent {
       node {
         label "build"
      }
    }
       environment {
        PATH= "/opt/apache-maven-3.8.8/bin:$PATH"
      }          
    stages {
        stage('Build') {
            steps {
                echo '<--------------- Building --------------->'
                sh 'printenv'
                sh 'mvn clean deploy -Dmaven.test.skip=true'
                echo '<------------- Build completed --------------->'
            }
        }     
        stage ("Sonar Analysis") {
            environment {
               scannerHome = tool 'sonar'  //scanner name configured for slave 
            }
            steps {
                echo '<--------------- Sonar Analysis started  --------------->'
                withSonarQubeEnv('sonar') {    
                    //sonarqube server name in master
                    sh "${scannerHome}/bin/sonar-scanner"
                }    
                echo '<--------------- Sonar Analysis stopped  --------------->'
            }   
        }
        stage("Jar Publish") {
         steps {
            script {
                    echo '<--------------- Jar Publish Started --------------->'
                     def server = Artifactory.newServer url:registry+"/artifactory" ,  credentialsId:"jfrog"
                     def properties = "buildid=${env.BUILD_ID},commitid=${GIT_COMMIT}";
                     def uploadSpec = """{
                          "files": [
                            {
                              "pattern": "jarstaging/(*)",
                              "target": "libs-release-local/{1}",
                              "flat": "false",
                              "props" : "${properties}",
                              "exclusions": [ "*.sha1", "*.md5"]
                            }
                         ]
                     }"""
                     def buildInfo = server.upload(uploadSpec)
                     buildInfo.env.collect()
                     server.publishBuildInfo(buildInfo)
                     echo '<--------------- Jar Publish Ended --------------->'  
            
            }
        }   
    }  
        stage('Unit Test') {
            steps {
                echo '<--------------- Unit Testing started  --------------->'
                sh 'mvn surefire-report:report'
                echo '<------------- Unit Testing stopped  --------------->'
            }
        }
         stage("Quality Gate"){  
           steps {  
               script {
                   echo '<--------------- Sonar Gate Analysis started --------------->'   
                     timeout(time: 1, unit: 'HOURS'){  
                        def qg = waitForQualityGate()   
                        if(qg.status !='OK'){   
                           error "Pipeline failed due to quality gate failures: ${qg.status}"  
                       }  
                   }   
                  echo '<--------------- Sonar Gate Analysis Completed --------------->'  
                }   
            }   
        }  
    }
}        

